apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "ch.bailu.aat"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 25
        versionName "v1.14.1"
        resValue "string", "app_sname", "AAT"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            resValue "string", "app_sname", "AAT.debug"
            applicationIdSuffix = ".debug"
            testCoverageEnabled = true
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        lintConfig file("${project.rootDir}/app/config/lint/lintconf.xml")
        htmlReport true
        htmlOutput file("$project.buildDir/reports/lint/lint.html")
    }
}
//findbugs
task findbugs(type: FindBugs) {
    classes = files("${project.rootDir}/app")
    effort = "max"
    excludeFilter = file("${project.rootDir}/findbugs-android-exclude.xml")
    includeFilter = file("${project.rootDir}/findbugs-include")
    ignoreFailures = true
    //con false la build failed con true non failed anche se ci sono warnings
    reportLevel = "low"
    source = fileTree('src/main/java/')

    // source 'src'
    //    include '**/*.java'
    //    exclude '**/gen/**'

    classpath = files()
    //classpath = files('C:/Users/Antonella/Downloads/FindBugs-IDEA-1.0.1.zip')

//
//
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"//            }
        }
    }
}



dependencies {
        /*
        Automatic MapsForge integration as described here: 
        https://github.com/mapsforge/mapsforge/raw/master/docs/Integration.md
    */

        // MapsForge
        def mapsforgeVersion = '0.10.0'

        // MapsForge Core
        implementation "org.mapsforge:mapsforge-core:$mapsforgeVersion"
        implementation "org.mapsforge:mapsforge-map:$mapsforgeVersion"
        implementation "org.mapsforge:mapsforge-map-reader:$mapsforgeVersion"
        implementation "org.mapsforge:mapsforge-themes:$mapsforgeVersion"
        implementation "net.sf.kxml:kxml2:2.3.0"

        // MapsForge Android
        implementation "org.mapsforge:mapsforge-map-android:$mapsforgeVersion"
        implementation 'com.caverock:androidsvg:1.3'

        // Acra
        def acraVersion = '5.1.3'
        implementation "ch.acra:acra-mail:$acraVersion"
        implementation "ch.acra:acra-dialog:$acraVersion"

    // Local
    implementation project(path: ':util-java')
//copi ---> inserito per trifork pitest

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    testImplementation "org.assertj:assertj-core:1.7.0"
    //testCompile 'org.hamcrest:hamcrest-library:1.3'
   // testCompile "org.robolectric:robolectric:3.1.2"
    //compile 'com.android.support:appcompat-v7:25.2.0'
    //fine ins trifork


        androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
        androidTestImplementation 'androidx.test:runner:1.1.0'
        androidTestImplementation 'androidx.test:rules:1.1.0'

    // TESTING
    testCompileOnly(
            'junit:junit:4.12'
    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0'
    )
}

